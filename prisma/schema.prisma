// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt @id @default(autoincrement())
  email    String @unique
  password String
  fullName String

  contents Content[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId BigInt

  notifications         Notification[]
  uploadContentRequests UploadContentRequest[]
  newContentRequests    NewContentRequest[]
}

model Moderator {
  id       BigInt @id @default(autoincrement())
  email    String @unique
  password String
  fullName String

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId BigInt

  notifications         Notification[]
  uploadContentRequests UploadContentRequest[]
  newContentRequests    NewContentRequest[]
}

model Admin {
  id       BigInt @id @default(autoincrement())
  email    String @unique
  password String
  fullName String

  notifications         Notification[]
  uploadContentRequests UploadContentRequest[]
  newContentRequests    NewContentRequest[]
}

model Branch {
  id       BigInt @id @default(autoincrement())
  name     String @unique
  duration Int

  semesters             Semester[]
  users                 User[]
  moderators            Moderator[]
  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Semester {
  id   BigInt @id @default(autoincrement())
  name String

  subjects Subject[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId BigInt

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Subject {
  id   BigInt @id @default(autoincrement())
  name String

  units Unit[]

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId BigInt

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Unit {
  id   BigInt @id @default(autoincrement())
  name String

  contents Content[]

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId BigInt

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Content {
  id           BigInt   @id @default(autoincrement())
  title        String
  description  String
  imageUrl     String
  uploadedDate DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       Boolean  @default(false)

  uploadedBy BigInt
  uploader   User   @relation(fields: [uploadedBy], references: [id])

  relatedVideos RelatedVideo[]

  Unit   Unit   @relation(fields: [unitId], references: [id])
  unitId BigInt

  uploadContentRequests UploadContentRequest[]

  File   File?
  fileId BigInt?
}

enum FileType {
  pdf
  txt
  docs
}

model File {
  id   BigInt   @id @default(autoincrement())
  name String
  url  String
  size BigInt
  type FileType

  contentId BigInt  @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model RelatedVideo {
  id               BigInt @id @default(autoincrement())
  videoTitle       String
  videoDescription String
  videoUrl         String

  Content   Content @relation(fields: [contentId], references: [id])
  contentId BigInt
}

enum NotificationType {
  NewContentUpdate
  Approval
  Rejected
  RequestForContent
}

model Notification {
  id          BigInt           @id @default(autoincrement())
  title       String
  description String
  type        NotificationType
  contentUrl  String

  User   User?   @relation(fields: [userId], references: [id])
  userId BigInt?

  Moderator   Moderator? @relation(fields: [moderatorId], references: [id])
  moderatorId BigInt?

  Admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId BigInt?
}

enum UploadContentRequestStatus {
  Approved
  Rejected
  Pending
}

model UploadContentRequest {
  id     BigInt                     @id @default(autoincrement())
  status UploadContentRequestStatus @default(Pending)

  User   User   @relation(fields: [userId], references: [id])
  userId BigInt

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId BigInt

  Content   Content @relation(fields: [contentId], references: [id])
  contentId BigInt

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId BigInt

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId BigInt

  Unit   Unit   @relation(fields: [unitId], references: [id])
  unitId BigInt

  moderatorId BigInt
  Moderator   Moderator @relation(fields: [moderatorId], references: [id])

  Admin   Admin  @relation(fields: [adminId], references: [id])
  adminId BigInt
}

enum NewContentRequestType {
  NewContent
  UpdateContent
}

model NewContentRequest {
  id              BigInt                @id @default(autoincrement())
  description     String
  rejectionReason String?
  newContentUrl   String?
  requestType     NewContentRequestType

  User   User   @relation(fields: [userId], references: [id])
  userId BigInt

  Moderator   Moderator @relation(fields: [moderatorId], references: [id])
  moderatorId BigInt

  Admin   Admin  @relation(fields: [adminId], references: [id])
  adminId BigInt

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId BigInt

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId BigInt

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId BigInt

  Unit   Unit   @relation(fields: [unitId], references: [id])
  unitId BigInt
}
