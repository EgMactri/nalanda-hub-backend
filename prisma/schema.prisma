// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  MOD
  ADMIN
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  fullName String
  role     USER_ROLE @default(USER)

  contents Content[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  notifications             Notification[]
  newContentRequests        NewContentRequest[]    @relation("Requester")
  newContentRequestsMod     NewContentRequest[]    @relation("Moderator")
  newContentRequestsAdmin   NewContentRequest[]    @relation("Admin")
  UploadContentRequest      UploadContentRequest[] @relation("Uploader")
  UploadContentRequestMod   UploadContentRequest[] @relation("Moderator")
  UploadContentRequestAdmin UploadContentRequest[] @relation("Admin")
}

// model Moderator {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   password String
//   fullName String

//   Branch   Branch @relation(fields: [branchId], references: [id])
//   branchId Int

//   notifications         Notification[]
//   uploadContentRequests UploadContentRequest[]
//   newContentRequests    NewContentRequest[]
// }

// model Admin {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   password String
//   fullName String

//   notifications         Notification[]
//   uploadContentRequests UploadContentRequest[]
//   newContentRequests    NewContentRequest[]
// }

model Branch {
  id       Int    @id @default(autoincrement())
  name     String @unique
  duration Int

  semesters             Semester[]
  users                 User[]
  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Semester {
  id   Int    @id @default(autoincrement())
  name String

  subjects Subject[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  units Unit[]

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Unit {
  id   Int    @id @default(autoincrement())
  name String

  contents Content[]

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  uploadContentRequests UploadContentRequest[]
  newContentRequest     NewContentRequest[]
}

model Content {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  imageUrl     String
  uploadedDate DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       Boolean  @default(false)

  uploadedBy Int
  uploader   User @relation(fields: [uploadedBy], references: [id])

  relatedVideos RelatedVideo[]

  Unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int

  uploadContentRequests UploadContentRequest[]

  File   File?
  fileId Int?
}

enum FileType {
  pdf
  txt
  docs
}

model File {
  id   Int      @id @default(autoincrement())
  name String
  url  String
  size Int
  type FileType

  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model RelatedVideo {
  id               Int    @id @default(autoincrement())
  videoTitle       String
  videoDescription String
  videoUrl         String

  Content   Content @relation(fields: [contentId], references: [id])
  contentId Int
}

enum NotificationType {
  NewContentUpdate
  Approval
  Rejected
  RequestForContent
}

model Notification {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  type        NotificationType
  contentUrl  String

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

enum UploadContentRequestStatus {
  Approved
  Rejected
  Pending
}

model UploadContentRequest {
  id     Int                        @id @default(autoincrement())
  status UploadContentRequestStatus @default(Pending)

  User       User @relation(name: "Uploader", fields: [uploaderId], references: [id])
  uploaderId Int

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  Content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  Unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int

  moderatorId Int?
  Moderator   User? @relation(name: "Moderator", fields: [moderatorId], references: [id])

  Admin   User? @relation(name: "Admin", fields: [adminId], references: [id])
  adminId Int?
}

enum NewContentRequestType {
  NewContent
  UpdateContent
}

model NewContentRequest {
  id              Int                   @id @default(autoincrement())
  description     String
  rejectionReason String?
  newContentUrl   String?
  requestType     NewContentRequestType

  User        User @relation(name: "Requester", fields: [requesterId], references: [id])
  requesterId Int

  Moderator   User? @relation(name: "Moderator", fields: [moderatorId], references: [id])
  moderatorId Int?

  Admin   User? @relation(name: "Admin", fields: [adminId], references: [id])
  adminId Int?

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  Unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int
}
