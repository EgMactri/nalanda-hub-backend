// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  USER
  MOD
  ADMIN
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  fullName String
  role     USER_ROLE @default(USER)

  contents Content[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  notifications    Notification[]
  myRequests       Request[]      @relation("myRequests_user")
  assignedRequests Request[]      @relation("assignedRequests_mod")
}

model Branch {
  id       Int    @id @default(autoincrement())
  name     String @unique
  duration Int

  semesters Semester[]
  users     User[]
  contents  Content[]
  Request   Request[]
}

model Semester {
  id   Int    @id @default(autoincrement())
  name String

  subjects Subject[]

  Branch   Branch    @relation(fields: [branchId], references: [id])
  branchId Int
  contents Content[]
  Request  Request[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  units Unit[]

  Semester   Semester  @relation(fields: [semesterId], references: [id])
  semesterId Int
  contents   Content[]
  Request    Request[]
}

model Unit {
  id   Int    @id @default(autoincrement())
  name String

  contents Content[]

  Subject   Subject   @relation(fields: [subjectId], references: [id])
  subjectId Int
  Request   Request[]
}

model Content {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  status      Boolean @default(false)

  uploadedDate DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploadedBy Int
  uploader   User @relation(fields: [uploadedBy], references: [id])

  relatedVideos RelatedVideo[]

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  Unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int

  File   File?
  fileId Int?

  Request Request?
}

enum FileType {
  pdf
  txt
  docs
}

model File {
  id   Int      @id @default(autoincrement())
  name String
  url  String
  size Int
  type FileType

  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model RelatedVideo {
  id               Int    @id @default(autoincrement())
  videoTitle       String
  videoDescription String
  videoUrl         String

  Content   Content @relation(fields: [contentId], references: [id])
  contentId Int
}

enum NotificationType {
  NewContentUpdate
  RequestForContent
  Approved
  Rejected
}

model Notification {
  id         Int              @id @default(autoincrement())
  title      String
  type       NotificationType
  contentUrl String?

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

enum RequestStatus {
  Approved
  Rejected
  Pending
}

enum RequestType {
  NewContent
  UpdateContent
  UploadContent
}

model Request {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  rejectionReason String?
  newContentUrl   String?
  requestType     RequestType
  status          RequestStatus @default(Pending)

  User        User @relation(name: "myRequests_user", fields: [requesterId], references: [id])
  requesterId Int

  Moderator   User @relation(name: "assignedRequests_mod", fields: [moderatorId], references: [id])
  moderatorId Int

  contentId Int?     @unique
  Content   Content? @relation(fields: [contentId], references: [id])

  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  Semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int

  Subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId Int

  Unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int
}
